#include <iostream>
#include <stdexcept>

/*Это объявление шаблона функции, позволяющее использовать `narrow_cast` с различными типами `To` (целевой тип) и `From` (исходный тип)*/
/*В шаблоне функции `template <typename To, typename From>`, `To` и `From` — это *параметрические типы* (template parameters) или *шаблонные параметры*.
 Они являются заполнительными именами, которые будут заменены на конкретные типы данных во время *инстанцирования* шаблона.

* `typename To`: Это объявление параметра шаблона, который определяет *целевой тип* (target type) для преобразования.
 Когда вы будете вызывать функцию, `To` будет заменено на фактический тип данных, в который вы хотите преобразовать значение. 
 Например, если вы вызовете `narrow_cast<int>(3.14)`, то `To` будет `int`.

* `typename From`: Это объявление параметра шаблона, который определяет *исходный тип* (source type) значения, которое будет преобразовано.
 Это тип входного значения вашей функции. В примере `narrow_cast<int>(3.14)`, `From` будет `double` (или `float`, в зависимости от контекста).*/
template <typename To, typename From>
To narrow_cast(From value) {
    /*Здесь выполняется собственно сужающее преобразование. `static_cast` пытается преобразовать значение `value` типа `From` в значение `result` типа `To`.
     Это может привести к потере информации (например, при преобразовании `double` в `int`).
*/
    To result = static_cast<To>(value);
    /* Это ключевая часть функции – проверка на потерю информации. Она выполняет обратное преобразование `result` обратно в тип `From` 
        и сравнивает его с исходным значением `value`.
     Если значения не равны, значит, при сужающем преобразовании произошла потеря информации.*/
    if (static_cast<From>(result) != value) {
        throw std::runtime_error("Narrowing conversion error");
    }
    return result;
}

int main() {
    try {
        
        double i = narrow_cast<double>(3);
        std::cout << "Преобразование прошло успешно: " << i << std::endl;
        int j = narrow_cast<int>(2147483648.0); // Переполнение для 32-битного int
        std::cout << "Это не выведется" << std::endl;
    } catch (const std::runtime_error& e) {
        std::cerr << "Ошибка: " << e.what() << std::endl;
    }
    return 0;
}